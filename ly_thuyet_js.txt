1. cách để trèn js sự dụng thẻ <script></script> 
 - chèn nội tuyến trong thẻ <head></head> hoặc phần cuối của thẻ <body></body>
 - chèn ngoại tuyến bằng một file riêng .js và gắn liên kết ở cuối <body></body>

2. các hình thức xuất dữ liệu của js
 - innerHTML : thay đổi một phần tự HTML  - Sdung khi muốn hiện thị kết quả lên trang web
 - document.write() : ghi trực tiếp nội dung vào trang web  - thường sử dụng trong quá trình tải trang
 - window.alert() : hiện thị một hộp thoại thông báo
 - window.prompt() : hiện thị hộp thoại nhập liệu, yêu cầu người dùng nhập liệu
 - console.log() : ghi thông tin vào bảng điều khiển của trình duyệt

3. các câu lệnh phổ biến trong js
 - câu lệnh gán 
    let x = 10;
    let y = 5;
 - câu lệnh điều kiện
    if (x > y) {
        console.log("x lớn hơn y);
    }else{
        console.log("x không lớn hơn y);
    }
 - câu lệnh vòng lặp
    for(let i = 0; i < 5 ; i+=){
        console.log(i);
    }
 - câu lệnh hàm
    function sayhello(){
        console.log("xin chao Viet Nam");
    }

    sayhell(); // gọi hàm
 - câu lệnh trả về
    function sum(a, b){
        return a + b;
    }

    let result = sum(5, 10);
    console.log(result);

4. cú pháp trong JS
 - biến : khai báo biến dùng var, let, hoặc const
 - câu lệnh : câu lệch gán, câu lệnh điều kiện, câu lệnh vòng lặp (chi tiết xem mục 2)
 - Hàm (functions) : khai báo hàm, gọi hàm ( chi tiết xem mục 2)
 - Đối tượng, mảng :
    Đối tượng: 
    VD : let person = {
        firstName: "John",
        lastName: "Doe",
        age: 30
    };

    Mảng:
    VD : let fruits = ["Fruits", "Banana"]
 - Toán tử số học
    let tong = 5 + 3; //8
    let hieu = 5  - 3; //2
    let tich = 5 * 3; //15
    let thuong = 5 / 2; // 2.5
    let du = 5 % 3; // 2
 - Toán tử so sánh
    so sánh bằng (5 === 5)
    so sánh khác ( 5 !== 4)
    so sanh lớn, nhỏ (5 > 4), (4 < 5)
 - Cú pháp chuỗi
    let greeting = "Hello, World!";
    let multiLine = `This is a multi-line string.`;

 - Cú pháp dấu phẩy
    let person = {
        firstName: "John",
        lastName: "Doe",
        age: 30
    };
    let numbers = [1, 2, 3, 4, 5];

 - Cú pháp chú thích
    // Đây là một chú thích đơn dòng

    /*
    Đây là một chú thích nhiều dòng
    Có thể kéo dài nhiều dòng
    */

 - Cú pháp khối mã
    if (true) {
        console.log("Đây là một khối mã.");
    }

5. Biến trong JS
 - biến trong JS có thể khai báo gồm 4 cách gồm : tự động, var, let, const
    ưu điểm:
    let và const có phạm vi khối, không thể khai báo lại, phải khai báo trước khi sử dụng, không ràng buộc với this, không được nâng lên
    
    nhược điểm:
    var  không cần phải khai báo, được nâng lên, liên kết với điều này

    Luôn khai báo const khi biết chắc giá trị. Sử dụng const khi bạn khai báo:
        Một mảng mới
        Một đối tượng mới 
        Một hàm mới
        Một RegExp mới

6. Toán tử JS
    có nhiều loại toán tử khác nhau:
    - Toán tử số học
    - Toán tử gán
    - Toán tử so sánh
    - Các toán tử chuỗi
    - Toán tử logic
    - Toán tử Bitwise
    - Toán tử ba ngôi
    - Toán tử loại

7. các kiểu dữ liệu trong JS
 - String : Chuỗi, dùng để lưu trữ các chuỗi ký tự
 - Number : Số, bao gồm cả số nguyên và số thập phân
 - BigInt : Số nguyên rất lớn dùng để lưu trữ các số nguyên hơn hơn Number
 - Boolean : Lưu trữ giá trị 'true' or 'false'
 - Undefined : Giá trị mặc định khi một biết chưa được khai báo
 - Null : Đại diện cho không có giá trị
 - Symbol : Một giá trị duy nhất, thường dùng cho định danh duy nhất
 - Object : Đối tượng, có thể các giá trị phức tạp như mảng, set, map v.v (chi tiết ở mục giao diện)
  
8. Hàm trong JS
 - Hàm trong JS là khối mã được thiết kế để thực hiện một tác vụ cụ thể
 - Một hàm JS được thự thi khi được gọi nó ra

9. Đối tượng (Object) trong JS 
 - Object là kiểu dữ liệu phức hợp cho phép bạn lưu trữ nhiều giá trị dưới dang cặp key - value
 - Ví dụ tạo một Object :

    let person = {
    name: "John",          // key là "name", value là "John"
    age: 30,               // key là "age", value là 30
    greet: function() {    // key là "greet", value là một hàm
        console.log("Hello!");
        }
    };

 - ví dụ truy cập thuộc tính Object
   - dấu chấm : dùng để truy cập thuộc tính bằng cách gọi trực tiếp từ key

   console.log(person.name);  // Output: John

   - dấu ngoặc vuông : dùng để truy cập thuộc tính thông qua tên key dạng chuỗi

   console.log(person["age"]);  // Output: 30

 - Ví dụ về thêm, xóa thuộc tính
    - thêm , cập nhật
    person.job = "Developer";   // Thêm thuộc tính mới "job"
    person.age = 31;            // Cập nhật giá trị "age"

    - xóa
    delete person.job;  // Xóa thuộc tính "job"

 - Một số tính năng quan trọng
    - phương thức (Method) : Là các hàm được lưu trữ dưới giá trị thuộc tính
    - Nested Object : Object có thể chứ các Object khác bên trong
    - VD :
        let car = {
        brand: "Toyota",
        model: "Camry",
        details: {
            year: 2022,
            color: "red"
        }
    };
    console.log(car.details.year);  // Output: 2022

    => Object rất linh hoạt thường được sử dụng để tạo nhóm các dữ liệu liên quan tới nhau
        đặc biết các ứng dụng phức tạp như web, app

10. Thuộc tính đối tượng của JS
 - là cặp key-value (kháo và giá trị), mà một đối tưởng sở hữu. Mỗi thuộc tính có thể lữu chữ cho bất kì giá trị nào
 - Cú pháp định nghĩa
    let object = {
        key1 : value1,
        key2 : value2
    };
 - Ví dụ đơn giản
    let car = {
        brand: "Toyota",
        model: "camry",
        year: 2022
    };

11. Đối tượng hiện thị trong JS 
 - DOM và đối tượng hiện thị
    DOM la một mô hình mà trình duyệt để sự dụng hiện thị html
    Đối tượng hiện thị trong JS là các phần HTML mà bạn có thể thao tác trên web như div, p, button...
 - Truy cập đối tượng hiện thị
    getElementById("id") : truy cập phàn tử qua id
    querySelector(".class") : Truy cập qua bộ chọn CSS
 - Thao tác với đối tượng hiện thị
    thay đổi nội dung : element.innerHTML = "Noi dung moi";
    thay đổi kiểu dáng : element.style.color = "red";
    thêm/ xóa class: element.classList.add("className");
    xóa phần tử : element.remove();
 - ví dụ
    
    let element = document.getElementById("className");
    element.innerHTML = "noi dung moi";
    element.style.color = "red";

12. Sự kiện trong JS (event JS)
 - Một số sự kiện đặc biệt
    Sự kiện chuột
    - click : Xẩy ra khi người dùng nhập chuột vào một phần tử
    - dblclick : Xảy ra khi người dùng nhấp đúp chuột
    - mouseover : Xảy ra khi người dùng di qua một phần tử
    - mouseout : Xảy ra khi người dùng dời ra khỏi một phần tử
    
    Sự kiện bàn phím
    - keydown : Xảy ra khi người dùng nhấn phím
    - keyup : Xảy ra khi người dùng nhả phím

    Sự kiện form
    - submit : Xảy ra khi người dùng gửi form
    - change : Xảy ra khi giá trị của một trường nhập liệu thay đổi
    - focus : Xảy ra khi một phần tử được chọn
    - blur : Xảy ra khi một phần tử mất tiêu điểm

    Sự kiện trang web
    - load : xảy ra khi trang or hình ảnh tải xong
    - resize : xảy ra khi các kích thước của trang web thay đổi
    - scroll : xảy ra khi người dùng cuộn trang

 - Ví dụ:
    <button id="myButton">Nhấn tôi!</button>

    <script>
    // Truy cập phần tử nút
        let button = document.getElementById("myButton");

        // Lắng nghe sự kiện click và thực thi hàm
        button.addEventListener("click", function() {
            alert("Bạn đã nhấn nút!");
         });
    </script>

 - Tóm tắt

    Sự kiện là các tương tác ở trang web
    Dùng addEventListener() để xử lý sự kiện
    Các sự kiện phổ biến như click, load, submit ...

13. các thành phần String trong JS
 - String:
    là một chuỗi kí tự được đặt trong dấu nháy đơn('  '), nháy kép ("  "), dấu backtick
    ví dụ :
    let str = "Phenikaa TechLearn Club";

 - Phương Thức chuỗi ( String Mathods)
    length : trả về độ dài
    toUpperCase() : chuyển chuỗi thành viết hoa
    toLowerCase() : chuyển chuỗi thành viết thường
    trim() : loại bỏ khoảng trắng ở đầu và cuối chuỗi
    slice(start, end): trích xuất chuỗi ở khoảng từ start đến end không bao gồm end
    substring(start, end): tương tự như slice(), nhưng không chấp nhận chỉ số âm
    replace(searchValue, newValue): thay thế chuỗi con seachValue bằng chuỗi newValue
    concat() : nối các chuỗi với nhau

    VD: 
    let str1 = "Hello World";
    let str2 = " Hello HaNoi ";
    console.log(str1.length); // 11
    console.log(str1.toUpperCase()); // "HELLO WORLD"
    console.log(str2.toLowerCase()); // " hello hanoi "
    console.log(str2.trim()); // "Hello HaNoi"
    console.log(str1.slice(0,5)); // "Hello"
    console.log(str1.substring(0,4)); // "Hello"
    console.log(str1.replace("World", "HaNam")); // "Hello HaNam"
    console.log(str1.concat(", ", str2)); // "Hello World, Hello HaNoi"

 - Tìm kiếm chuỗi (String Search)
    indexOf(substring): Trả về vị trí đầu tiên của substring trong chuỗi; nếu không tìm thấy, trả về -1.
    lastIndexOf(substring): Tương tự indexOf(), nhưng tìm từ cuối chuỗi.
    includes(substring): Kiểm tra chuỗi có chứa substring không; trả về true hoặc false.
    startsWith(substring): Kiểm tra chuỗi có bắt đầu bằng substring không.
    endsWith(substring): Kiểm tra chuỗi có kết thúc bằng substring không.
    search(regex): Tìm kiếm substring theo biểu thức chính quy; trả về vị trí đầu tiên hoặc -1 nếu không tìm thấy.
    
    VD:
    let str = "Hello, world!";
    console.log(str.indexOf("world"));        // 7
    console.log(str.lastIndexOf("o"));        // 4
    console.log(str.includes("Hello"));       // true
    console.log(str.startsWith("Hello"));     // true
    console.log(str.endsWith("world!"));      // true
    console.log(str.search(/world/));          // 7
 - Template Strings (Chuỗi mẫu)
    Template strings (hoặc template literals) là một tính năng trong ES6 cho phép bạn sử dụng cú pháp dễ đọc hơn để nhúng biến và biểu thức vào chuỗi. Chuỗi mẫu sử dụng dấu backtick (`) thay vì dấu nháy đơn hoặc kép, và bạn có thể chèn biến hoặc biểu thức bằng cách sử dụng ${}.

    VD: 
    let name = "John";
    let age = 30;

    let greeting = `Hello, my name is ${name} and I am ${age} years old.`;
    console.log(greeting); // Output: "Hello, my name is John and I am 30 years old."

14. Số trong Js( JS Number)

 - Trong JS hỗ trợ kiểu dữ liệu number để đại diện cho số, trong đó có cả số thực và số nguyên..

 - JS BigInt
   BigInt là kiểu dữ liệu số nguyên được giới thiệu trong ES2020, dùng để lưu trữ các số nguyên lớn hơn 2^53 - 1
   Để tạo một BigInt thì chúng ta thêm chữ n vào cuối or cho chuỗi số vào BigInt()

   VD:
      let bigInt1 = 123456789012345678901234567890n; // BigInt
      let bigInt2 = BigInt("123456789012345678901234567890"); // BigInt từ chuỗi

 - Phương thức số trong JS
      Number.isNaN(value): Kiểm tra xem giá trị có phải là NaN (Not-a-Number) không.
      console.log(Number.isNaN(NaN)); // true

      Number.isInteger(value): Kiểm tra xem giá trị có phải là số nguyên không.
      console.log(Number.isInteger(5)); // true
      console.log(Number.isInteger(5.5)); // false      

      Number.parseFloat(string): Chuyển đổi chuỗi thành số thực.
      console.log(Number.parseFloat("3.14")); // 3.14

      Number.parseInt(string): Chuyển đổi chuỗi thành số nguyên.
      console.log(Number.parseInt("123px")); // 123

      Number.toFixed(digits): Làm tròn số đến số chữ số thập phân đã chỉ định.
      let num = 2.34567;
      console.log(num.toFixed(2)); // "2.35"

 - Thuộc tính số liên quan trong JS
      Number.MAX_VALUE: Giá trị lớn nhất có thể biểu diễn bằng Number.
      console.log(Number.MAX_VALUE); // 1.7976931348623157e+308

      Number.MIN_VALUE: Giá trị nhỏ nhất khác 0 có thể biểu diễn bằng Number.
      console.log(Number.MIN_VALUE); // 5e-324

      Number.MAX_SAFE_INTEGER: Giá trị nguyên lớn nhất mà JavaScript có thể chính xác (2^53 - 1).
      console.log(Number.MAX_SAFE_INTEGER); // 9007199254740991

      Number.MIN_SAFE_INTEGER: Giá trị nguyên nhỏ nhất mà JavaScript có thể chính xác (-2^53 + 1)
      console.log(Number.MIN_SAFE_INTEGER); // -9007199254740991

 - tóm tắt
      Number: Kiểu dữ liệu cơ bản cho số trong JavaScript.
      BigInt: Kiểu dữ liệu cho số nguyên lớn.
      Number Methods: Các phương thức như isNaN(), isInteger(), parseFloat(), và toFixed().
      Number Properties: Các thuộc tính như MAX_VALUE, MIN_VALUE, MAX_SAFE_INTEGER, và MIN_SAFE_INTEGER.


